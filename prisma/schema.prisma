datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  account      String      @unique
  // 员工编码，适配编程师傅
  code         String?     @unique
  password     String
  name         String?
  role         Role?       @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  roleId       String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model Department {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  code          String         @unique
  transferItems TransferItem[]
  users         User[]
}

model Menu {
  id         String         @id @default(cuid())
  parentId   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  title      String
  key        String         @unique
  sort       Int            @default(0)
  remark     String?
  enabled    Boolean?       @default(true)
  breadcrumb Boolean?       @default(false)
  ignore     Boolean?       @default(false)
  roles      MenusOnRoles[]
}

model Role {
  id        String         @id @default(cuid())
  title     String
  key       String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  users     User[]
  menus     MenusOnRoles[]
}

model MenusOnRoles {
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String

  @@id([roleId, menuId])
}

model Pictures {
  id        String   @id @default(cuid())
  src       String
  name      String?
  sign      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dictionary {
  id      String  @id @default(cuid())
  // 字典名
  title   String
  // 字典编码
  key     String  @unique
  // 状态 1启用0停用
  enabled Int?    @default(1)
  // 排序
  sort    Int?    @default(0)
  // 备注
  remark  String?

  dictItems DictionaryItem[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model DictionaryItem {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // 字典名称Id
  dict      Dictionary? @relation(fields: [dictId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  dictId    String?
  // 行编码
  key       String      @unique
  // 名称
  title     String
  // 状态 1启用0停用
  enabled   Int         @default(1)
  // 排序
  sort      Int?        @default(0)
  // 备注
  remark    String?
}

model Style {
  id           String   @id @default(cuid())
  // 款号
  styleCode    String?  @unique
  // 品类
  category     String?
  categoryName String?
  src          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderDetails OrderDetail[]
  transfers    Transfer[]
}

model Customer {
  id            String   @id @default(cuid())
  // 客户名称
  name          String?
  // 客户联系方式
  telephone     String?
  // 联系人名字
  contactsName  String?
  // 联系人电话
  contactsPhone String?
  // 客户编号
  customerCode  String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orders Order[]
}

model Order {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orderNumber   String    @unique
  // 订单日期
  orderDate     DateTime?
  // 字印
  fontPrint     String?
  fontPrintName String?
  // 备注
  remark        String?

  transfers    Transfer[]
  orderDetails OrderDetail[]

  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  customerId String?
}

model OrderDetail {
  id           String   @id @default(cuid())
  // 品名
  category     String?
  // 品名名称
  categoryName String?
  // 圈号
  circle       String?
  // 件重
  singleWeight Decimal?
  // 数量
  quantity     Int?
  // 单价
  unitPrice    Decimal?
  // 总价
  totalPrice   Decimal?
  // 总重
  totalWeight  Decimal?
  // 备注
  remark       String?
  // 图片
  imgSrc       String?

  // 0未排产 1已排产
  status Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 订单
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  orderId String?
  // 款号
  style   Style?  @relation(fields: [styleId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  styleId String?
}

model Transfer {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transferCode  String?        @unique
  category      String?
  categoryName  String?
  quantity      Decimal?
  circle        String?
  singleWeight  String?
  // 字印
  fontPrint     String?
  fontPrintName String?
  // 状态 0未生产 1生产中，2完单
  status        Int            @default(0)
  // 备注
  remark        String?
  transferItems TransferItem[]
  order         Order?         @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  orderId       String?
  style         Style?         @relation(fields: [styleId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  styleId       String?
}

model TransferItem {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  // 出入库类型 0出 1入 
  type            TransferType
  // 重量
  weight          Decimal?
  // 件数
  quantity        Decimal?
  // 收发类型 半成品/良品/不良品等，通过枚举配置
  productType     String?
  productTypeName String?
  remark          String?
  department      Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  departmentId    String?
  transfer        Transfer?    @relation(fields: [transferId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  transferId      Int?
  transferCode    Int?
}

enum TransferType {
  IN
  OUT
}
